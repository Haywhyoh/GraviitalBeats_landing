name: Deploy Landing Page to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
      
      - name: Build Vite app
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ github.sha }}
      
      - name: Create .env file if needed
        run: |
          touch .env
          # Add environment variables here when needed
          echo "VITE_API_URL=https://api.graviitalbeats.com" >> .env
          echo "VITE_APP_VERSION=${{ github.sha }}" >> .env
        
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "dist/,package.json,.env"
          target: "/var/www/graviitalbeats.com"
          strip_components: 0
          overwrite: true
      
      - name: Configure and serve application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Navigate to landing page directory
            cd /var/www/graviitalbeats.com
            
            # Set proper permissions
            sudo chown -R www-data:www-data /var/www/graviitalbeats.com
            
            # Create a deploy log
            DEPLOY_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            echo "$DEPLOY_TIME - Deployed commit ${{ github.sha }}" >> deploy_history.log
            
            # Configure Nginx if not already set up (first time only)
            if [ ! -f /etc/nginx/sites-available/graviitalbeats.com ]; then
              echo "Creating Nginx configuration for graviitalbeats.com..."
              sudo tee /etc/nginx/sites-available/graviitalbeats.com > /dev/null << EOL
            # HTTP configuration - Redirects to HTTPS
            server {
                listen 80;
                listen [::]:80;
                server_name graviitalbeats.com www.graviitalbeats.com;
                
                # Redirect all HTTP requests to HTTPS
                location / {
                    return 301 https://\$host\$request_uri;
                }
            }
            
            # Primary HTTPS server for www subdomain
            server {
                listen 443 ssl;
                listen [::]:443 ssl;
                server_name www.graviitalbeats.com;
                
                # SSL configuration
                ssl_certificate /etc/letsencrypt/live/graviitalbeats.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/graviitalbeats.com/privkey.pem;
                
                # Redirect www to non-www (canonical URL)
                return 301 https://graviitalbeats.com\$request_uri;
            }
            
            # Primary HTTPS server for non-www domain
            server {
                listen 443 ssl;
                listen [::]:443 ssl;
                server_name graviitalbeats.com;
                
                # SSL configuration
                ssl_certificate /etc/letsencrypt/live/graviitalbeats.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/graviitalbeats.com/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
                ssl_session_timeout 1d;
                ssl_session_cache shared:SSL:10m;
                ssl_stapling on;
                ssl_stapling_verify on;
                
                root /var/www/graviitalbeats.com/dist;
                index index.html;
                
                # Security headers
                add_header X-Frame-Options "SAMEORIGIN";
                add_header X-Content-Type-Options "nosniff";
                add_header X-XSS-Protection "1; mode=block";
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
                
                location / {
                    try_files \$uri \$uri/ /index.html;
                }
                
                # Caching static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 30d;
                    add_header Cache-Control "public, no-transform";
                }
                
                # Enable gzip compression
                gzip on;
                gzip_comp_level 6;
                gzip_min_length 256;
                gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
            }
            EOL
              
              # Check if Certbot is installed
              if ! command -v certbot &> /dev/null; then
                echo "Installing Certbot..."
                sudo apt-get update
                sudo apt-get install -y certbot python3-certbot-nginx
              fi
              
              # Enable the site before obtaining SSL certificate
              sudo ln -s /etc/nginx/sites-available/graviitalbeats.com /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl reload nginx
              
              # Obtain SSL certificate for both www and non-www domains
              echo "Obtaining SSL certificate..."
              sudo certbot --nginx -d graviitalbeats.com -d www.graviitalbeats.com --non-interactive --agree-tos -m ${{ secrets.ADMIN_EMAIL }} || true
              
              # Test Nginx configuration
              sudo nginx -t
              
              # Reload Nginx to apply changes
              sudo systemctl reload nginx
            else
              echo "Nginx configuration already exists. Reloading Nginx..."
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            # Generate deployment verification file with timestamp
            DEPLOY_VERIFICATION="landing_deployment_${{ github.sha }}_$(date +%s)"
            echo $DEPLOY_VERIFICATION > dist/deploy-verify.txt
            
            # Add monitoring check if not already configured
            if [ ! -f /etc/cron.d/check_graviitalbeats_status ]; then
              echo "Creating uptime monitoring cron job..."
              sudo tee /etc/cron.d/check_graviitalbeats_status > /dev/null << EOL
            # Check website status every 5 minutes
            */5 * * * * www-data curl -s -o /dev/null -w "%{http_code}" https://graviitalbeats.com > /var/log/graviitalbeats_status.log 2>&1
            EOL
              sudo chmod 644 /etc/cron.d/check_graviitalbeats_status
            fi
            
            echo "Deployment complete!"
      
      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Wait a moment for the server to refresh
            sleep 5
            
            # Check if the site is responding correctly
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://graviitalbeats.com || echo "Failed")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "✅ Deployment verified. Site is responding correctly with status code 200."
            else
              echo "⚠️ Site verification failed with status code: $HTTP_STATUS"
              echo "Please check the server logs for details."
              exit 1 
            fi 